#!/usr/bin/env zsh
function has_cmd() {
  command -v "$1" >/dev/null 2>&1
}

export DOTFILES="${HOME}/dotfiles/zsh"
export ZSHINCLUDES="${HOME}/.local/share/zsh_includes"

source "${DOTFILES}/aliases_functions"
# source $DOTFILES/theme

source "${ZSHINCLUDES}/zsh-completions/zsh-completions.plugin.zsh"
source "${ZSHINCLUDES}/zsh-history-substring-search/zsh-history-substring-search.zsh"
source "${ZSHINCLUDES}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
source "${ZSHINCLUDES}/z/z.sh"
source "${ZSHINCLUDES}/zsh-iterm-touchbar/zsh-iterm-touchbar.plugin.zsh"

HISTFILE="${HOME}/.zsh_history"
HISTSIZE=10000
SAVEHIST=10000

zstyle ':completion:*' menu select
zstyle ':completion:*' completer _complete
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' '+l:|=* r:|=*'

autoload -U compinit && compinit
zmodload -i zsh/complist

# http://zsh.sourceforge.net/Doc/Release/Options.html
unsetopt menu_complete
unsetopt flowcontrol

setopt prompt_subst
setopt always_to_end
setopt append_history
setopt auto_menu
setopt complete_in_word
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt inc_append_history
setopt interactivecomments
setopt share_history

# Force emacs mode
bindkey -e

bindkey -a 'gg' beginning-of-buffer-or-history
bindkey -a 'g~' vi-oper-swap-case
bindkey -a G end-of-buffer-or-history

bindkey '^a' beginning-of-line
bindkey '^e' end-of-line
bindkey '^f' forward-word
bindkey '^b' backward-word

bindkey '^[[3~' delete-char
bindkey '^[3;5~' delete-char

# History-by-command (default in oh-my-zsh)
bindkey '^[[A' up-line-or-search                                                
bindkey '^[[B' down-line-or-search

export EDITOR='vim'
export CLICOLOR=1
export LSCOLORS=Gxfxcxdxbxegedabagacad

# Prompt

# Tabs in terminal titled with bottom-level PWD
precmd() {
  # sets the tab title to current dir
  echo -ne "\e]1;${PWD##*/}\a"
}
export VIRTUAL_ENV_DISABLE_PROMPT=1

function kubectl_info() {
  # Prints the helm symbol and current kubectl context GKE project.
  echo "\u2388 $(kubectl config current-context | sed -E 's/^gke_([a-z0-9-]*)_.*_([a-z0-9-]*)$/\1:\2/') "
}

function virtualenv_info() {
    # Prints current virtualenv if one is active.
    [ $VIRTUAL_ENV ] && echo '('`basename ${VIRTUAL_ENV}`') '
}

function git_prompt() {
    BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/*\(.*\)/\1/' | tr -d '[:space:]')
    if [ ! -z $BRANCH ]; then
        echo -n "%F{yellow}${BRANCH}%F{reset} "
        if [ ! -z "$(git status --short)" ]; then
            echo "%F{red}âœ— "
        fi
    fi
}

PS1='%F{magenta}$(kubectl_info)%F{reset}%F{green}$(virtualenv_info)%F{reset}$(git_prompt)%F{red}[%2~]%F{reset}%F{yellow}%(?..[%?] )%F{reset}> '

# Ensure /usr/local/bin is on the path (PyCharm bug)
if [[ ! $PATH =~ ".*/usr/local/bin.*" ]]; then
    export PATH="${PATH}:/usr/local/bin"
fi

# Add golang's bins to path
PATH="${PATH}:$HOME/go/bin"

# Pip user install paths
export PATH="${PATH}:${HOME}/Library/Python/3.7/bin"
export PATH="${PATH}:${HOME}/Library/Python/2.7/bin"

# ITerm2 v3 Beta shell integration
if [ -f "${HOME}/.iterm2_shell_integration.zsh" ]; then
    source "${HOME}/.iterm2_shell_integration.zsh"
fi

# Fuzzy finder shell integration.
[[ $- == *i* ]] && source "${HOME}/.fzf/shell/completion.zsh" 2> /dev/null

# Fuzzy finder key bindings
source "${HOME}/.fzf/shell/key-bindings.zsh"
[ -f "${HOME}/.fzf.zsh" ] && source "${HOME}/.fzf.zsh"

source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'
source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'

# Disable creating the '._blah' metadata files when calling tar.
export COPYFILE_DISABLE=true

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "${NVM_DIR}/nvm.sh" ] && . "${NVM_DIR}/nvm.sh" --no-use

# Python (homebrew) PATH
# export PATH="/usr/local/opt/python/libexec/bin:$PATH
# export PATH="/usr/local/opt/python3/bin:$PATH"

# Python virtualenvwrapper - REPLACED WITH PYENV
# export WORKON_HOME=$HOME/.venvs
# export PROJECT_HOME=$HOME/Projects
# export VIRTUALENVWRAPPER_SCRIPT=$HOME/Library/Python/2.7/bin/virtualenvwrapper.sh
# export VIRTUALENVWRAPPER_PYTHON=$(which python2)
# export VIRTUALENVWRAPPER_VIRTUALENV=$HOME/Library/Python/2.7/bin/virtualenv
# source $HOME/Library/Python/2.7/bin/virtualenvwrapper_lazy.sh

# Pyenv
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
PATH="${HOME}/.pyenv/shims:${PATH}"

# Perl
PATH="/Users/carnold/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/Users/carnold/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/Users/carnold/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/Users/carnold/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/carnold/perl5"; export PERL_MM_OPT;

# Nginx/Openresty
export TEST_NGINX_BINARY=openresty

# Rust
export PATH="${HOME}/.cargo/bin:${PATH}"
export PATH="${PATH}:${HOME}/fly"

# goenv
if has_cmd "goenv"; then
    export GOPATH="${HOME}/go"
    eval "$(goenv init -)"
fi

# rbenv
if has_cmd "rbenv"; then
    eval "$(rbenv init -)"
    export PATH="${HOME}/.rbenv/shims:${PATH}"
fi

# SDKMAN - "must" be at end of this file.
export SDKMAN_DIR="${HOME}/.sdkman"
[[ -s "${HOME}/.sdkman/bin/sdkman-init.sh" ]] && source "${HOME}/.sdkman/bin/sdkman-init.sh"
