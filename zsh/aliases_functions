#!/usr/bin/env zsh

# ===== Aliases =====

alias l="ls -alhpT"
alias dlf="docker logs -f"
alias dco="docker-compose"
alias k="kubectl"
alias kgal="kubectl get all --all-namespaces --show-labels"

# Kubernetes Clusters
alias ktest="kubectl --context test-cluster"
alias kstaging="kubectl --context us-cluster -nstaging"
alias kprod="kubectl --context us-cluster -nproduction"
alias kdev="kubectl --context k3d-sezzle-dev"
alias awslocal="AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test AWS_DEFAULT_REGION=us-west-2 aws --endpoint-url='http://localstack.dev.localhost'"

# Git related (mostly derived from ZSH git plugin)
alias gcam='git commit -a -m'
alias gco='git checkout'
alias gtag="git describe --tags"
alias gd='git diff'
alias gdca='git diff --cached'
alias gdcw='git diff --cached --word-diff'
alias gdct='git describe --tags `git rev-list --tags --max-count=1`'
alias gdt='git diff-tree --no-commit-id --name-only -r'
alias gdw='git diff --word-diff'
alias gf='git fetch'
alias gfa='git fetch --all --prune'
alias gfo='git fetch origin'
alias gl='git pull'
alias ggpull='git fetch --all --tags && git pull origin $(git_current_branch)'
alias ggpush='git push origin $(git_current_branch)'
alias gss='git status -s'
alias gst='git status'
alias gpomt='git push origin master --tags'

alias k9='k9s'

# ===== Functions =====
function cdgp {
    cd "${GOPATH}/src"
}

# Source: https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/git.zsh#L61
# Outputs the name of the current branch
# Usage example: git pull origin $(git_current_branch)
# Using '--quiet' with 'symbolic-ref' will not cause a fatal error (128) if
# it's not a symbolic ref, but in a Git repo.
function git_current_branch() {
    local ref
    ref=$(command git symbolic-ref --quiet HEAD 2> /dev/null)
    local ret=$?
    if [[ $ret != 0 ]]; then
        [[ $ret == 128 ]] && return  # no git repo.
        ref=$(command git rev-parse --short HEAD 2> /dev/null) || return
    fi
    echo ${ref#refs/heads/}
}

# Swap iterm profile on the fly.
function pro() { echo -e "\033]50;SetProfile=$1\a" }

# Shorter git describe with tags.
function gdt() { git describe --tags --always }

# ===== Kubernetes helpers =====

# Send reboot command into alpine-based pod for service
function kreboot () {
    kubectl exec svc/$1 -- /sbin/reboot
}

# Gets all pods in all namespaces, ag output for string if provided.
function kgp () {
    if [ -z $1 ] ; then
        kubectl get pods -o wide --all-namespaces
    else
        kubectl get pods -o wide --all-namespaces | ag $1
    fi
}
function kgpl () {
    if [ -z $1 ] ; then
        kubectl get pods --show-labels --all-namespaces
    else
        kubectl get pods --show-labels --all-namespaces | ag $1
    fi
}

function kga () {
    if [ -z $1 ] ; then
        kubectl get all --all-namespaces
    else
        kubectl get all --all-namespaces | ag $1
    fi
}

function kgd () {
    if [ -z $1 ] ; then
        kubectl get deployment -o wide --all-namespaces
    else
        kubectl get deployment -o wide --all-namespaces | ag $1
    fi
}

function kgs () {
    if [ -z $1 ] ; then
        kubectl get svc -o wide --all-namespaces
    else
        kubectl get svc -o wide --all-namespaces | ag $1
    fi
}

# Calls kubectl describe pod
function kdp () {
    if [ -z $1 ] ; then
        echo "Provide pod name for kubectl describe pod"
    else
        kubectl describe pod $1
    fi
}

# sh into the first pod returned by searching for podname.
function ksh () {
    if [ -z $1 ]; then
        echo "Usage: ksh <pod>"
        return 1
    fi
    POD=$(kubectl get pod | grep $1|head -1|awk '{print $1}')
    echo "Shelling into pod $POD"
    kubectl exec -ti $POD -- sh
}

# bash into first pod returned by searching for podname.
function kbash () {
    if [ -z "$1" ]; then
        echo "Usage: kbash <pod search string>"
        return 1
    fi
    POD=$(kubectl get pod | grep $1 | head -1 | awk '{print $1}')
    if [ ! -z "$2" ]; then
        CONTAINER="$2"
        echo "Shelling into pod ${POD} container ${CONTAINER}"
        kubectl exec -i -t "$POD" -c "$CONTAINER" -- bash -i -l
    else
        echo "Shelling into default container of pod ${POD}"
        kubectl exec -i -t "$POD" -- bash -i -l
    fi
}

# bash into the jnlp container of a pod (for jenkins-kubernetes)
function jbash () {
    if [ -z $1 ]; then
    fi
    POD=$(kubectl get pod | grep $1 | head -1 | awk '{print $1}')
    kubectl exec $POD -c jnlp -i -t -- bash -il
}

# Follow logs of a Python API container in a given pod.
function klf () {
    if [ -z $1 ]; then
        echo "Usage klf <pod>"
        return 1
    fi
    kubectl logs -f $1 $(echo $1 | rev | cut -d- -f3- | rev)
}

# Get into the docker-for-mac host
function dockernsenter () {
    docker run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh
}

# Notes - create and find
function note() { $EDITOR ~/.notes/"$*"; }
function notelist() { ls -c ~/.notes/ | grep "$*"; }
function interview() {
    if [ ! -f ~/.notes/interviews/"$*" ]; then
        echo "Interview doesn't exist, copying template."
        cp ~/.notes/templates/interview ~/.notes/interviews/"$*"
    fi
    $EDITOR ~/.notes/interviews/"$*"
}

# Docker helpers
function dgv() { eval "$(dinghy env)"; }

function docker-image-children() {
    if [ -z $1 ]; then
        echo "Usage docker-get-children <image>"
        return 1
    fi
    docker inspect --format='{{.Id}} {{.Parent}}' $(docker images --filter since=$1 -q)
}

function docker-delete-danglers() {
    docker rmi $(docker images --filter "dangling=true" -q --no-trunc)
}

# Opens a directory or file in Intellij IDEA
function ijidea() {
    IDEA=`ls -1d /Applications/IntelliJ\ * | tail -n1`
    wd=`pwd`
    # if directory given
    if [ -d "$1" ]; then
        wd=`ls -1d "$1" | head -n1`
    fi
    # if file given
    if [ -f "$1" ]; then
        open -a "$IDEA" "$1"
    else
        pushd $wd > /dev/null
        if [ -d ".idea" ]; then
            open -a "$IDEA" .
        elif [ -f *.ipr ]; then
            open -a "$IDEA" `ls -1d *.ipr | head -n1`
        elif [ -f pom.xml ]; then
            open -a "$IDEA" "pom.xml"
        else
            open "$IDEA"
        fi
        popd > /dev/null
    fi
}

function sdkenv() {
    unset POSSIBLE_CANDIDATES
    $(IFS=" ")
    for f in $(ls .*-version); do
        POSSIBLE_CANDIDATES+=(${${f##.}%-*})
    done

    if [[ ! "${POSSIBLE_CANDIDATES[@]}" ]]; then
        echo "No candidate(s) provided."
    fi

    for c in "${POSSIBLE_CANDIDATES[@]}"; do
        echo "checking candidate ${c}"
        if [[ "$SDKMAN_CANDIDATES_CSV" != *"${c}"* ]]; then
            echo "Candidate "${c}" not found in SDKMAN_CANDIDATES_CSV environment variable."
        else
            VERSION=$(cat ".${c}-version")
            if [[ -z "$VERSION" ]]; then
                echo "Stop! This is not a valid $CANDIDATE project!"
            else
                echo "Switching to $CANDIDATE $VERSION ..."
            fi

            __sdk_use "$c" "$VERSION"
        fi
    done
}

export AWS_USERNAME="chris.arnold"

function aws_mfa {
  unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
  local token="$1"

  echo -n "MFA Token: "
  read token

  local result=$(aws sts get-session-token --serial-number arn:aws:iam::030664766007:mfa/$AWS_USERNAME --token-code "$token")
  export AWS_ACCESS_KEY_ID=$(echo "$result" | jq -r '.Credentials.AccessKeyId')
  export AWS_SECRET_ACCESS_KEY=$(echo "$result" | jq -r '.Credentials.SecretAccessKey')
  export AWS_SESSION_TOKEN=$(echo "$result" | jq -r '.Credentials.SessionToken')
}

function test_aws() {
    local role_arn="arn:aws:iam::603884908598:role/OrganizationAccountAccessRole"
    temporary_credentials="$(aws \
            sts assume-role \
            --role-arn="${role_arn}" \
            --role-session-name="kops-access"
        )"
    unset AWS_PROFILE
    export "AWS_ACCESS_KEY_ID=$(echo "${temporary_credentials}" | jq -re '.Credentials.AccessKeyId')"
    export "AWS_SECRET_ACCESS_KEY=$(echo "${temporary_credentials}" | jq -re '.Credentials.SecretAccessKey')"
    export "AWS_SESSION_TOKEN=$(echo "${temporary_credentials}" | jq -re '.Credentials.SessionToken')"
}

function login_data_lake {
    if [ -z "$AWS_SESSION_TOKEN" ]; then
       aws_mfa;
    fi;

    local result=$(aws redshift get-cluster-credentials --cluster-identifier data-lake \
                      --db-user $AWS_USERNAME --db-name dev --duration-seconds 3600 --auto-create --db-groups data)

	export PGUSER=$(echo "$result" | jq -r '.DbUser')
	export PGPASSWORD=$(echo "$result" | jq -r '.DbPassword')

    echo 'You can connect via if on the VPN: `pgcli -h data-lake.sezzle.internal -p 5439 -U "$PGUSER" dev`'
    echo 'You can view your temporary password via `echo $PGPASSWORD`'
}

function kops_test_exports {
   export KOPS="./kops-wrapper"
   export CLUSTER=k8s.infra-sandbox.szzldev.com
   export KOPS_ROLE_ARN=arn:aws:iam::603884908598:role/OrganizationAccountAccessRole
   export KOPS_STATE_STORE=s3://infra-sandbox-szzldev-kops-state-store
}
